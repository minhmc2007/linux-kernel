name: Build Arch Linux Kernel

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      kernel_version:
        description: 'Kernel version to build (e.g., 6.6.1)'
        required: false
        default: 'latest'
      release_tag:
        description: 'Release tag name'
        required: false
        default: 'kernel-build'

env:
  KERNEL_VERSION: ${{ github.event.inputs.kernel_version || 'latest' }}
  RELEASE_TAG: ${{ github.event.inputs.release_tag || github.ref_name || 'kernel-build' }}

jobs:
  build-kernel:
    runs-on: ubuntu-latest
    container:
      image: archlinux:latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Initialize Arch Linux environment
      run: |
        # Update system and install base development tools
        pacman -Syu --noconfirm
        pacman -S --noconfirm base-devel git wget curl bc kmod inetutils xmlto python-sphinx python-sphinx_rtd_theme graphviz imagemagick
        
        # Install kernel build dependencies
        pacman -S --noconfirm linux-headers pahole cpio perl tar xz libelf python-yaml

    - name: Setup build environment
      run: |
        # Create build user (makepkg doesn't run as root)
        useradd -m builder
        echo 'builder ALL=(ALL) NOPASSWD: ALL' >> /etc/sudoers
        chown -R builder:builder /github/workspace
        
        # Setup ccache for faster builds
        pacman -S --noconfirm ccache
        mkdir -p /home/builder/.ccache
        chown -R builder:builder /home/builder/.ccache

    - name: Get kernel source
      run: |
        su - builder -c "
          cd /github/workspace
          
          if [ '${{ env.KERNEL_VERSION }}' = 'latest' ]; then
            # Get latest stable kernel version
            LATEST_VERSION=\$(curl -s https://www.kernel.org/releases.json | grep -oP '\"version\":\s*\"\K[^\"]*' | head -1)
            echo \"KERNEL_VERSION=\$LATEST_VERSION\" >> \$GITHUB_ENV
            echo \"Building latest kernel version: \$LATEST_VERSION\"
          else
            echo \"Building specified kernel version: ${{ env.KERNEL_VERSION }}\"
          fi
          
          # Download kernel source
          KERNEL_VER=\${KERNEL_VERSION:-${{ env.KERNEL_VERSION }}}
          MAJOR_VER=\$(echo \$KERNEL_VER | cut -d. -f1)
          
          wget https://cdn.kernel.org/pub/linux/kernel/v\${MAJOR_VER}.x/linux-\${KERNEL_VER}.tar.xz
          tar -xf linux-\${KERNEL_VER}.tar.xz
          mv linux-\${KERNEL_VER} linux-source
        "

    - name: Configure kernel
      run: |
        su - builder -c "
          cd /github/workspace/linux-source
          
          # Copy current Arch kernel config as base
          zcat /proc/config.gz > .config 2>/dev/null || cp /boot/config-\$(uname -r) .config 2>/dev/null || make defconfig
          
          # Update config for current kernel version
          make olddefconfig
          
          # Optional: Apply any custom configurations here
          # You can modify .config or use make menuconfig in an interactive environment
          
          # Enable some commonly needed options
          scripts/config --enable CONFIG_IKCONFIG
          scripts/config --enable CONFIG_IKCONFIG_PROC
          scripts/config --set-str CONFIG_LOCALVERSION \"-custom\"
          
          # Apply the configuration
          make olddefconfig
        "

    - name: Build kernel
      run: |
        su - builder -c "
          cd /github/workspace/linux-source
          
          # Get number of CPU cores for parallel compilation
          NPROC=\$(nproc)
          echo \"Building with \$NPROC parallel jobs\"
          
          # Build kernel and modules
          make -j\$NPROC
          make -j\$NPROC modules
          
          # Install modules to temporary directory
          mkdir -p /tmp/kernel-install/lib/modules
          make INSTALL_MOD_PATH=/tmp/kernel-install modules_install
          
          # Copy kernel files
          mkdir -p /tmp/kernel-install/boot
          cp arch/x86/boot/bzImage /tmp/kernel-install/boot/vmlinuz
          cp System.map /tmp/kernel-install/boot/
          cp .config /tmp/kernel-install/boot/config
          
          # Create kernel package info
          KERNEL_VER=\$(make kernelrelease)
          echo \"Kernel version: \$KERNEL_VER\" > /tmp/kernel-install/kernel-info.txt
          echo \"Build date: \$(date)\" >> /tmp/kernel-install/kernel-info.txt
          echo \"Built on: \$(uname -a)\" >> /tmp/kernel-install/kernel-info.txt
        "

    - name: Create kernel archive
      run: |
        su - builder -c "
          cd /tmp/kernel-install
          
          # Get kernel version for filename
          KERNEL_VER=\$(cd /github/workspace/linux-source && make kernelrelease)
          
          # Create compressed archive
          tar -czf /github/workspace/arch-kernel-\${KERNEL_VER}.tar.gz .
          
          # Create checksums
          cd /github/workspace
          sha256sum arch-kernel-\${KERNEL_VER}.tar.gz > arch-kernel-\${KERNEL_VER}.tar.gz.sha256
          
          echo \"KERNEL_PACKAGE=arch-kernel-\${KERNEL_VER}.tar.gz\" >> \$GITHUB_ENV
          echo \"KERNEL_CHECKSUM=arch-kernel-\${KERNEL_VER}.tar.gz.sha256\" >> \$GITHUB_ENV
        "

    - name: Upload kernel artifacts
      uses: actions/upload-artifact@v4
      with:
        name: kernel-build
        path: |
          arch-kernel-*.tar.gz
          arch-kernel-*.tar.gz.sha256
        retention-days: 30

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ env.RELEASE_TAG }}-${{ github.run_number }}
        release_name: Arch Linux Kernel Build ${{ env.RELEASE_TAG }}-${{ github.run_number }}
        body: |
          ## Arch Linux Kernel Build
          
          **Kernel Version:** ${{ env.KERNEL_VERSION }}
          **Build Date:** ${{ github.event.head_commit.timestamp }}
          **Commit:** ${{ github.sha }}
          
          ### Installation Instructions
          
          1. Download the kernel package (`arch-kernel-*.tar.gz`)
          2. Verify the checksum with the provided `.sha256` file
          3. Extract the archive: `sudo tar -xzf arch-kernel-*.tar.gz -C /`
          4. Update bootloader configuration
          5. Reboot and select the new kernel
          
          ### Files Included
          - Kernel image (`vmlinuz`)
          - Kernel modules
          - System.map
          - Kernel configuration
          
          **Note:** This is a pre-release build. Test thoroughly before using in production.
        draft: false
        prerelease: true

    - name: Upload kernel package to release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./${{ env.KERNEL_PACKAGE }}
        asset_name: ${{ env.KERNEL_PACKAGE }}
        asset_content_type: application/gzip

    - name: Upload checksum to release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./${{ env.KERNEL_CHECKSUM }}
        asset_name: ${{ env.KERNEL_CHECKSUM }}
        asset_content_type: text/plain

    - name: Build summary
      run: |
        echo "## Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Kernel Version:** ${{ env.KERNEL_VERSION }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Package:** ${{ env.KERNEL_PACKAGE }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Release:** ${{ env.RELEASE_TAG }}-${{ github.run_number }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Build Status:** âœ… Success" >> $GITHUB_STEP_SUMMARY
