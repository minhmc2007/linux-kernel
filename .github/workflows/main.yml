name: Build Arch Linux Kernel

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      git_ref:
        description: 'The tag, branch, or commit SHA to build'
        required: true
        default: 'main'

env:
  RELEASE_TAG: ${{ github.event.inputs.git_ref || github.ref_name }}

jobs:
  build-kernel:
    runs-on: ubuntu-latest
    container:
      image: archlinux:latest
    
    steps:
    - name: Install Dependencies
      run: |
        pacman -Syu --noconfirm
        pacman -S --noconfirm git base-devel curl bc kmod inetutils xmlto python-sphinx python-sphinx_rtd_theme graphviz imagemagick
        pacman -S --noconfirm linux-headers pahole cpio perl tar xz libelf python-yaml

    - name: Checkout Kernel Source
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.inputs.git_ref || github.ref }}
        fetch-depth: 0

    - name: Setup build environment
      run: |
        useradd -m builder
        echo 'builder ALL=(ALL) NOPASSWD: ALL' >> /etc/sudoers
        cp -a . /home/builder/repo
        chown -R builder:builder /home/builder/repo
        pacman -S --noconfirm ccache
        mkdir -p /home/builder/.ccache
        chown -R builder:builder /home/builder/.ccache

    - name: Configure kernel and Determine Version
      # Give the step an ID so we can reference its outputs later
      id: config_and_version
      run: |
        su - builder -c "
          set -e
          cd /home/builder/repo
          
          if [ -f .config ]; then
            echo 'Using existing .config file.'
          else
            echo 'No .config found, creating default.'
            zcat /proc/config.gz > .config 2>/dev/null || make defconfig
          fi
          
          make olddefconfig
          scripts/config --enable CONFIG_IKCONFIG
          scripts/config --enable CONFIG_IKCONFIG_PROC
          scripts/config --set-str CONFIG_LOCALVERSION '-custom'
          make olddefconfig
          
          FINAL_KERNEL_VERSION=\$(make -s kernelrelease)
          echo \"Final Kernel release version will be: \$FINAL_KERNEL_VERSION\"
          
          # This is the correct way to export a variable from a step.
          # We write to GITHUB_OUTPUT, which is always available.
          echo \"kernel_version_output=\$FINAL_KERNEL_VERSION\" | sudo tee -a \$GITHUB_OUTPUT > /dev/null
        "

    - name: Build kernel
      run: |
        su - builder -c "
          set -e
          cd /home/builder/repo
          NPROC=\$(nproc)
          echo \"Building with \$NPROC parallel jobs...\"
          make -j\$NPROC
          
          sudo make INSTALL_MOD_PATH=/tmp/kernel-install modules_install
          
          sudo mkdir -p /tmp/kernel-install/boot
          # Use the output from the previous step to name the files
          sudo cp arch/x86/boot/bzImage /tmp/kernel-install/boot/vmlinuz-${{ steps.config_and_version.outputs.kernel_version_output }}
          sudo cp System.map /tmp/kernel-install/boot/System.map-${{ steps.config_and_version.outputs.kernel_version_output }}
          sudo cp .config /tmp/kernel-install/boot/config-${{ steps.config_and_version.outputs.kernel_version_output }}
        "

    - name: Create kernel archive
      id: archive
      run: |
        set -e
        cd /tmp/kernel-install
        
        # Use the reliable step output here
        KERNEL_VERSION="${{ steps.config_and_version.outputs.kernel_version_output }}"
        echo "Packaging kernel version: ${KERNEL_VERSION}"
        
        PACKAGE_NAME="arch-kernel-${KERNEL_VERSION}.tar.gz"
        CHECKSUM_NAME="${PACKAGE_NAME}.sha256"
        
        tar -czf "/github/workspace/${PACKAGE_NAME}" .
        
        cd /github/workspace
        sha256sum "${PACKAGE_NAME}" > "${CHECKSUM_NAME}"
        
        # Set environment variables for the upload steps
        echo "KERNEL_PACKAGE=${PACKAGE_NAME}" >> $GITHUB_ENV
        echo "KERNEL_CHECKSUM=${CHECKSUM_NAME}" >> $GITHUB_ENV

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        # Use the reliable step output for the release name
        tag_name: ${{ env.RELEASE_TAG }}-${{ github.run_number }}
        release_name: Arch Linux Kernel ${{ steps.config_and_version.outputs.kernel_version_output }} (Build ${{ github.run_number }})
        body: |
          ## Arch Linux Kernel Build
          
          **Kernel Version:** `${{ steps.config_and_version.outputs.kernel_version_output }}`
          **Git Ref Built:** `${{ env.RELEASE_TAG }}`
          **Commit:** `${{ github.sha }}`
          
          Built using the workflow from the `main` branch.
        draft: false
        prerelease: true

    - name: Upload kernel package to release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: /github/workspace/${{ env.KERNEL_PACKAGE }}
        asset_name: ${{ env.KERNEL_PACKAGE }}
        asset_content_type: application/gzip

    - name: Upload checksum to release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: /github/workspace/${{ env.KERNEL_CHECKSUM }}
        asset_name: ${{ env.KERNEL_CHECKSUM }}
        asset_content_type: text/plain

    - name: Build summary
      run: |
        echo "## âœ… Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Kernel Version:** ${{ steps.config_and_version.outputs.kernel_version_output }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Git Ref Built:** ${{ env.RELEASE_TAG }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Package:** ${{ env.KERNEL_PACKAGE }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Release:** [${{ env.RELEASE_TAG }}-${{ github.run_number }}](${{ steps.create_release.outputs.html_url }})" >> $GITHUB_STEP_SUMMARY
